[
  {
    "objectID": "Data_Security.html",
    "href": "Data_Security.html",
    "title": "Security Details",
    "section": "",
    "text": "STS took a lot of sweet talking before they approved our Github use, so we want to be on our best behavior (in addition to general data security concerns). As such, the following practices should be followed when using Github (expanded from the summary on the first page).\n\n\nUse your tn.gov email to create a personal account (can we use our existing account and add our tn.gov email?). Enable two-factor authentication for increased security. You will be able to contribute to your own teams repos using your own account. [section on hosting your own repos on your own account]\n\n\n\nAdmins for the TDH-CEDEP organization must maintain user access to the correct teams. This includes adding new members to the correct team, removing team members when they leave their positions, and performing regular user audits.\n\n\n\nIf you just want version control on a project, you can just use Git locally. Github is great for sharing projects and working with outside parties, but if the process is internal, there might not be a point to hosting it on Github at all.\n\n\n\nThe default choice for repositories should be to make them private. More public repos are just more ways for things to accidentally get published to the public. That being said, there are reasons why you might want a repo to be public. Public repos are great for sharing data and code with other parties, and even having them suggest improvements. You can even publish data packages that are useful for TDH employees who might not have their own Github accounts.\nIt is important to note, that a repository being private should not affect the sort of information published there. PHI, passwords, etc. are not allowed in any repo, public or private. [should there be a middle tier of data that can be in private repos, but not public ones , e.g. network paths?]\n\n\n\nThe following data are not allowed to be published to any Github repository:\n\nPHI\nNon-public data (preliminary, data needing suppression, etc.)\nUsernames/Passwords/Credentials\nAPI tokens\n\nIn order to prevent this data from getting into Github, remove it from your codes and become used to excluding it from your work without consideration for if it will end up in Github. It is especially easy to leave notes or comments in code about test cases or outliers that might need to be deleted before saving a file.\nYou can also use gitignore functionality to hide certain files from Git, which can help when you need data for a code to run on your machine, but you don’t want it in the version history that goes in Github.\n[Consider a middle tier of info that can be in private but not public repos]\n\n\nIf sensitive data gets pushed to Github, we need to take it down as fast as possible. Follow the following steps:\n\nNotify an admin\nMake the repository private (if it isn’t already)\nEdit the repo to remove the sensitive data\nEdit the version history to remove the sensitive data [develop guidance because this can be complex]. Note information needed for follow-up investigation (time published and removed, author, file source, etc.)\nNotify anyone else who needs to know (e.g., HIPAA protocol)\nDetermine steps to make the repo public again (if appropriate)"
  },
  {
    "objectID": "Data_Security.html#account-setup",
    "href": "Data_Security.html#account-setup",
    "title": "Security Details",
    "section": "",
    "text": "Use your tn.gov email to create a personal account (can we use our existing account and add our tn.gov email?). Enable two-factor authentication for increased security. You will be able to contribute to your own teams repos using your own account. [section on hosting your own repos on your own account]"
  },
  {
    "objectID": "Data_Security.html#team-access",
    "href": "Data_Security.html#team-access",
    "title": "Security Details",
    "section": "",
    "text": "Admins for the TDH-CEDEP organization must maintain user access to the correct teams. This includes adding new members to the correct team, removing team members when they leave their positions, and performing regular user audits."
  },
  {
    "objectID": "Data_Security.html#do-you-even-need-github",
    "href": "Data_Security.html#do-you-even-need-github",
    "title": "Security Details",
    "section": "",
    "text": "If you just want version control on a project, you can just use Git locally. Github is great for sharing projects and working with outside parties, but if the process is internal, there might not be a point to hosting it on Github at all."
  },
  {
    "objectID": "Data_Security.html#public-vs-private-repositories",
    "href": "Data_Security.html#public-vs-private-repositories",
    "title": "Security Details",
    "section": "",
    "text": "The default choice for repositories should be to make them private. More public repos are just more ways for things to accidentally get published to the public. That being said, there are reasons why you might want a repo to be public. Public repos are great for sharing data and code with other parties, and even having them suggest improvements. You can even publish data packages that are useful for TDH employees who might not have their own Github accounts.\nIt is important to note, that a repository being private should not affect the sort of information published there. PHI, passwords, etc. are not allowed in any repo, public or private. [should there be a middle tier of data that can be in private repos, but not public ones , e.g. network paths?]"
  },
  {
    "objectID": "Data_Security.html#sensitive-data",
    "href": "Data_Security.html#sensitive-data",
    "title": "Security Details",
    "section": "",
    "text": "The following data are not allowed to be published to any Github repository:\n\nPHI\nNon-public data (preliminary, data needing suppression, etc.)\nUsernames/Passwords/Credentials\nAPI tokens\n\nIn order to prevent this data from getting into Github, remove it from your codes and become used to excluding it from your work without consideration for if it will end up in Github. It is especially easy to leave notes or comments in code about test cases or outliers that might need to be deleted before saving a file.\nYou can also use gitignore functionality to hide certain files from Git, which can help when you need data for a code to run on your machine, but you don’t want it in the version history that goes in Github.\n[Consider a middle tier of info that can be in private but not public repos]\n\n\nIf sensitive data gets pushed to Github, we need to take it down as fast as possible. Follow the following steps:\n\nNotify an admin\nMake the repository private (if it isn’t already)\nEdit the repo to remove the sensitive data\nEdit the version history to remove the sensitive data [develop guidance because this can be complex]. Note information needed for follow-up investigation (time published and removed, author, file source, etc.)\nNotify anyone else who needs to know (e.g., HIPAA protocol)\nDetermine steps to make the repo public again (if appropriate)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "Github_Basics.html",
    "href": "Github_Basics.html",
    "title": "Github Basics",
    "section": "",
    "text": "This section covers the basics of how Github works. There are a lot of resources online that can also help you understand. Github is a website that is based on Git. Git is a common version control software.\n\n\nGit was developed to track changes in software over time, with multiple people working on the same code at once. You can download Git onto your PC and use it without worrying about Github at all. The diagram below shows how a project is developed using Git version control.\n\nThe project starts in an initial state, called the main (sometimes master) branch. In the diagram above, the main branch is colored green. Each circle is the code at a point in time, referred to as a commit. When a change is made to the code, you must choose to commit the change to the version history. You will also be asked to write a short description of what you changed or added. Uncommitted changes are considered staged, since they are waiting to be accepted or rejected.\nFor minor fixes, like correcting a typo, you could edit the main branch of code and commit the changes to it directly. But sometimes a change is more involved, and working on it will take time. Furthermore, sometimes you need to make changes to the foundations of a script that render it non-functional, but other people rely on the code to keep running. In this case, Git allows you to create a branch (in blue and orange above). Branches are a copy of the code that is separate from the main, functional code. You can then make edits to your branch without breaking the functional code. When you have finished work on the branch, you can then merge your changes into the main branch. In the diagram above, the blue branch took three commits to finish, whereas the orange commit only took one.\nWhen making a commit, or merging a branch into main, you will have the opportunity to review the old version of the code and the new version. This is so each change is highlighted and looked over before it is added to the version history. The above process allows for complex projects with several contributors to be developed with a clear history of who did what and when, with the ability to go back to previous versions of the project, if need be.\nA Git project can consist of one or more files that are located together in a folder. This location, and the files in it are known as a repository, or repo. All the files and subfolders in the repo are included in the project’s version control. Git can be used by typing commands into a terminal or command prompt, but other tools (Github, Rstudio, etc.) provide a user interface that can make getting started easier.\nHere are the key terms from the description above:\n\nVersion control - Tracking, recording, and organizing changes to a project over time\nGit - a version control software\nMain - The base version of a project\nBranch - a copy of the main project, where changes can be made\nStaged Change - an edit to a file in a repo that has not been committed\nCommit - Officially adding a change to the version history (to the main project, or to a branch)\nMerge - Adding changes from a branch back into the main project\nRepository - A location that contains the files and folders that make up a project\n\n\n\n\nAs stated above, you can use Git locally on your own computer. In this case, you are working on a local repository, or a project on your own computer. Github is a remote repository; a place to store the code that is not your own computer. This allows the code, with all its version history, to be available to everyone (a public repo), or github users with certain permissions (a private repo).\nYou can take an existing local Git repository and push it up to Github. Most code editors can easily integrate with Git and Github, to facilitate communication between your local repo and Github’s remote repo. After working on some changes to the code and making one or more commits, you can push the changes up to Github (syncing the Github repo to align with your local repo). Conversely, you can pull the current version of the project from the Github repo to your own local repo in order to make changes off of it. This is useful for projects with multiple collaborators. You will typically all use Github as the hub for development; pull down the current version of the project with the most recent changes from others, make and commit your changes locally, then push them back to Github. Then others can do the same.\n\nPulls and pushes happen to branches of a repository, but you should start off by working on a small project with only a main branch. Here is an example of the code review panel in R for a small documentation change:\n\nHere are the key terms from the description above:\n\nLocal Repo - A group of files and folders that make up a project, stored on your own computer\nRemote Repo - A repo stored on a remote server, like Github\nPull - Copying a remote repo from Github to a local repo on your machine\nPush - Updating a remote Github repo to reflect commits made to your local repo\n\n\n\n\nMany different file types can be placed into a repo, but there are some items which are commonly used to make working with Git/Github easier. None of these are strictly required (except for a license, potentially), but you should use them.\n\n\nA file that explains the purpose of the project, and any useful documentation on how to use the code inside. In Github, readme files should be markdown documents (i.e., readme.md). When structured this way, the readme information will be rendered in the Github repo.\n\n\n\nThe .gitignore file allows you to specify files and folders that should not be included in the version control tracking. These files can be housed inside the repo folder, and could be critical to the functioning of the code (e.g., important data for analysis), but changes to these files are not tracked, and they won’t be pushed to Github. Specific files can be listed in the .gitignore, or patterns that exclude multiple items (e.g., all PDFs, all files with “PHI” in the name, all files in a subfolder)\n\n\n\nThe main folder of a repo can store files, but it can also help to organize files into subfolders. Common subfolders are for data, scripts, or images\n\n\n\nSince the code put into public repositories can be seen and copied by anyone, you likely need a license that describes how the code can be used by others [what is the TDH default license? Does this need to be mentioned in security?].\n\n\n\n\nYou will need to link your computer to your Github account. Options include:\n\nGit terminal\nGit UI [maybe?]\nIDE capabilities\n\nRStudio - https://usethis.r-lib.org/articles/git-credentials.html\nSAS - https://communities.sas.com/t5/SAS-Communities-Library/How-to-connect-SAS-to-your-Git-profile/ta-p/772570\nVSCode\n\n\nYou should only need to set your credentials once [pending security concerns]. Once set, any commits/pushes/pulls/etc. will include your name, and you will have the ability to access private repositories for your teams."
  },
  {
    "objectID": "Github_Basics.html#what-is-git",
    "href": "Github_Basics.html#what-is-git",
    "title": "Github Basics",
    "section": "",
    "text": "Git was developed to track changes in software over time, with multiple people working on the same code at once. You can download Git onto your PC and use it without worrying about Github at all. The diagram below shows how a project is developed using Git version control.\n\nThe project starts in an initial state, called the main (sometimes master) branch. In the diagram above, the main branch is colored green. Each circle is the code at a point in time, referred to as a commit. When a change is made to the code, you must choose to commit the change to the version history. You will also be asked to write a short description of what you changed or added. Uncommitted changes are considered staged, since they are waiting to be accepted or rejected.\nFor minor fixes, like correcting a typo, you could edit the main branch of code and commit the changes to it directly. But sometimes a change is more involved, and working on it will take time. Furthermore, sometimes you need to make changes to the foundations of a script that render it non-functional, but other people rely on the code to keep running. In this case, Git allows you to create a branch (in blue and orange above). Branches are a copy of the code that is separate from the main, functional code. You can then make edits to your branch without breaking the functional code. When you have finished work on the branch, you can then merge your changes into the main branch. In the diagram above, the blue branch took three commits to finish, whereas the orange commit only took one.\nWhen making a commit, or merging a branch into main, you will have the opportunity to review the old version of the code and the new version. This is so each change is highlighted and looked over before it is added to the version history. The above process allows for complex projects with several contributors to be developed with a clear history of who did what and when, with the ability to go back to previous versions of the project, if need be.\nA Git project can consist of one or more files that are located together in a folder. This location, and the files in it are known as a repository, or repo. All the files and subfolders in the repo are included in the project’s version control. Git can be used by typing commands into a terminal or command prompt, but other tools (Github, Rstudio, etc.) provide a user interface that can make getting started easier.\nHere are the key terms from the description above:\n\nVersion control - Tracking, recording, and organizing changes to a project over time\nGit - a version control software\nMain - The base version of a project\nBranch - a copy of the main project, where changes can be made\nStaged Change - an edit to a file in a repo that has not been committed\nCommit - Officially adding a change to the version history (to the main project, or to a branch)\nMerge - Adding changes from a branch back into the main project\nRepository - A location that contains the files and folders that make up a project"
  },
  {
    "objectID": "Github_Basics.html#what-is-github",
    "href": "Github_Basics.html#what-is-github",
    "title": "Github Basics",
    "section": "",
    "text": "As stated above, you can use Git locally on your own computer. In this case, you are working on a local repository, or a project on your own computer. Github is a remote repository; a place to store the code that is not your own computer. This allows the code, with all its version history, to be available to everyone (a public repo), or github users with certain permissions (a private repo).\nYou can take an existing local Git repository and push it up to Github. Most code editors can easily integrate with Git and Github, to facilitate communication between your local repo and Github’s remote repo. After working on some changes to the code and making one or more commits, you can push the changes up to Github (syncing the Github repo to align with your local repo). Conversely, you can pull the current version of the project from the Github repo to your own local repo in order to make changes off of it. This is useful for projects with multiple collaborators. You will typically all use Github as the hub for development; pull down the current version of the project with the most recent changes from others, make and commit your changes locally, then push them back to Github. Then others can do the same.\n\nPulls and pushes happen to branches of a repository, but you should start off by working on a small project with only a main branch. Here is an example of the code review panel in R for a small documentation change:\n\nHere are the key terms from the description above:\n\nLocal Repo - A group of files and folders that make up a project, stored on your own computer\nRemote Repo - A repo stored on a remote server, like Github\nPull - Copying a remote repo from Github to a local repo on your machine\nPush - Updating a remote Github repo to reflect commits made to your local repo"
  },
  {
    "objectID": "Github_Basics.html#common-elements-of-a-repo",
    "href": "Github_Basics.html#common-elements-of-a-repo",
    "title": "Github Basics",
    "section": "",
    "text": "Many different file types can be placed into a repo, but there are some items which are commonly used to make working with Git/Github easier. None of these are strictly required (except for a license, potentially), but you should use them.\n\n\nA file that explains the purpose of the project, and any useful documentation on how to use the code inside. In Github, readme files should be markdown documents (i.e., readme.md). When structured this way, the readme information will be rendered in the Github repo.\n\n\n\nThe .gitignore file allows you to specify files and folders that should not be included in the version control tracking. These files can be housed inside the repo folder, and could be critical to the functioning of the code (e.g., important data for analysis), but changes to these files are not tracked, and they won’t be pushed to Github. Specific files can be listed in the .gitignore, or patterns that exclude multiple items (e.g., all PDFs, all files with “PHI” in the name, all files in a subfolder)\n\n\n\nThe main folder of a repo can store files, but it can also help to organize files into subfolders. Common subfolders are for data, scripts, or images\n\n\n\nSince the code put into public repositories can be seen and copied by anyone, you likely need a license that describes how the code can be used by others [what is the TDH default license? Does this need to be mentioned in security?]."
  },
  {
    "objectID": "Github_Basics.html#credentials",
    "href": "Github_Basics.html#credentials",
    "title": "Github Basics",
    "section": "",
    "text": "You will need to link your computer to your Github account. Options include:\n\nGit terminal\nGit UI [maybe?]\nIDE capabilities\n\nRStudio - https://usethis.r-lib.org/articles/git-credentials.html\nSAS - https://communities.sas.com/t5/SAS-Communities-Library/How-to-connect-SAS-to-your-Git-profile/ta-p/772570\nVSCode\n\n\nYou should only need to set your credentials once [pending security concerns]. Once set, any commits/pushes/pulls/etc. will include your name, and you will have the ability to access private repositories for your teams."
  }
]